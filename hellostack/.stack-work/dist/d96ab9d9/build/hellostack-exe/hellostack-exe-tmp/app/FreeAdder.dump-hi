
==================== FINAL INTERFACE ====================
2016-01-10 02:33:43.9535764 UTC

interface main@main:FreeAdder 7102
  interface hash: 5aeec47826bc07c24148539932ca6df1
  ABI hash: d42271be6a0229136fd1aad2bbb38ed1
  export-list hash: 360fff3b78a8a5b100eb96f1d5c0d515
  orphan hash: 72138d7a82918bcdd58b2d15eac6b55f
  flag hash: bd4988337968f447c8105e933c7b6aad
  sig of: Nothing
  used TH splices: False
  where
exports:
  FreeAdder.add3
  FreeAdder.mainfreeadder
module dependencies: Adder
package dependencies: StateVar-1.1.0.1@State_6K4a3UqSdqh6lGAm1wlr9s
                      array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ base-4.8.1.0*
                      bifunctors-5@bifun_6cWzSBWZD9ID5wcfOFIydn
                      binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      comonad-4.2.7.2@comon_EsayKmuIGPJJdbMoBEcxRq
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      contravariant-1.3.3@contr_1HGRfJ7yos72LK91k3YDgI
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o
                      distributive-0.4.4@distr_IiTFZxvjHzA0FvKz3AU35Q
                      exceptions-0.8.0.2@excep_8GsEeHgaIks3pVGk6GaELJ
                      free-4.12.1@free_2EJeoNML59VIyuzJGfHGjD ghc-prim-0.4.0.0
                      hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy integer-gmp-1.0.0.0
                      mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      prelude-extras-0.4.0.2@prelu_57eavILAbKD5CaKv31zEDY
                      semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO
                      semigroupoids-5.0.0.4@semig_IPk36dXHATB4yo2y5KnSeX
                      stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr
                      tagged-0.8.1@tagge_6Tf46oJAk552xT73wGffBW
                      text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
                      unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy:Data.Hashable.Generic
         stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr:Control.Monad.STM
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO:Data.List.NonEmpty
                         semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO:Data.Semigroup
                         tagged-0.8.1@tagge_6Tf46oJAk552xT73wGffBW:Data.Tagged
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashMap.Base
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashSet
import  -/  base-4.8.1.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  base-4.8.1.0:System.IO 5482930cc48b7457dc7c518d05c22912
import  -/  free-4.12.1@free_2EJeoNML59VIyuzJGfHGjD:Control.Monad.Trans.Free 3c5896e434e7a4cde1144d47cd4b5202
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  Adder 90974506101aeb86153265b3cc027eb7
  exports: bd343f1af4b74f30f3c85e555a698e0b
  AdderF e6795d042ba5706c10f18f89639a9d2b
b3bd8fb4f7374247f66814747d99323a
  $s$fShowFreeF ::
    GHC.Show.Show
      (Control.Monad.Trans.Free.FreeF
         Adder.AdderF
         GHC.Types.Int
         (Control.Monad.Trans.Free.FreeT
            Adder.AdderF GHC.Base.Maybe GHC.Types.Int))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Free.FreeF
                       Adder.AdderF
                       GHC.Types.Int
                       (Control.Monad.Trans.Free.FreeT
                          Adder.AdderF GHC.Base.Maybe GHC.Types.Int))
                  (Control.Monad.Trans.Free.$fShowFreeF_$cshowsPrec
                     @ Adder.AdderF
                     @ GHC.Types.Int
                     @ (Control.Monad.Trans.Free.FreeT
                          Adder.AdderF GHC.Base.Maybe GHC.Types.Int)
                     GHC.Show.$fShowInt
                     FreeAdder.$s$fShowFreeF1)
                  (Control.Monad.Trans.Free.$fShowFreeF_$cshow
                     @ Adder.AdderF
                     @ GHC.Types.Int
                     @ (Control.Monad.Trans.Free.FreeT
                          Adder.AdderF GHC.Base.Maybe GHC.Types.Int)
                     GHC.Show.$fShowInt
                     FreeAdder.$s$fShowFreeF1)
                  FreeAdder.$s$fShowFreeF_$s$fShowFreeF_$cshowList -}
f60e698a4eb8b23ce1a53a2a5a41500d
  $s$fShowFreeF1 ::
    GHC.Show.Show
      (Adder.AdderF
         (Control.Monad.Trans.Free.FreeT
            Adder.AdderF GHC.Base.Maybe GHC.Types.Int))
  {- Unfolding: (Adder.$fShowAdderF
                   @ (Control.Monad.Trans.Free.FreeT
                        Adder.AdderF GHC.Base.Maybe GHC.Types.Int)
                   FreeAdder.$s$fShowFreeF2) -}
c6841d57d52ec65cc6b87fd1c9656cf8
  $s$fShowFreeF2 ::
    GHC.Show.Show
      (Control.Monad.Trans.Free.FreeT
         Adder.AdderF GHC.Base.Maybe GHC.Types.Int)
  {- Strictness: m -}
51445158c2ab530013c3f86b4d88213e
  $s$fShowFreeF_$s$fShowFreeF_$cshowList ::
    [Control.Monad.Trans.Free.FreeF
       Adder.AdderF
       GHC.Types.Int
       (Control.Monad.Trans.Free.FreeT
          Adder.AdderF GHC.Base.Maybe GHC.Types.Int)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [Control.Monad.Trans.Free.FreeF
                             Adder.AdderF
                             GHC.Types.Int
                             (Control.Monad.Trans.Free.FreeT
                                Adder.AdderF GHC.Base.Maybe GHC.Types.Int)]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Control.Monad.Trans.Free.FreeF
                        Adder.AdderF
                        GHC.Types.Int
                        (Control.Monad.Trans.Free.FreeT
                           Adder.AdderF GHC.Base.Maybe GHC.Types.Int))
                   (Control.Monad.Trans.Free.$fShowFreeF_$cshowsPrec
                      @ Adder.AdderF
                      @ GHC.Types.Int
                      @ (Control.Monad.Trans.Free.FreeT
                           Adder.AdderF GHC.Base.Maybe GHC.Types.Int)
                      GHC.Show.$fShowInt
                      FreeAdder.$s$fShowFreeF1
                      Control.Monad.Trans.Free.$fFoldableFreeF7)
                   eta
                   eta1) -}
203fc18cfd5209d35dc812f19ab4adcc
  $s$fShowFreeT ::
    GHC.Show.Show
      (Control.Monad.Trans.Free.FreeT
         Adder.AdderF GHC.Base.Maybe GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Free.FreeT
                       Adder.AdderF GHC.Base.Maybe GHC.Types.Int)
                  (Control.Monad.Trans.Free.$fShowFreeT_$cshowsPrec
                     @ Adder.AdderF
                     @ GHC.Base.Maybe
                     @ GHC.Types.Int
                     FreeAdder.$s$fShowFreeT1)
                  FreeAdder.$s$fShowFreeT_$s$fShowFreeT_$cshow
                  FreeAdder.$s$fShowFreeT_$s$fShowFreeT_$cshowList -}
810af917e66a574fd2cad6871d8d4abc
  $s$fShowFreeT1 ::
    GHC.Show.Show
      (GHC.Base.Maybe
         (Control.Monad.Trans.Free.FreeF
            Adder.AdderF
            GHC.Types.Int
            (Control.Monad.Trans.Free.FreeT
               Adder.AdderF GHC.Base.Maybe GHC.Types.Int)))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                FreeAdder.$s$fShowFreeT_$s$fShowMaybe -}
670d513da30c6af9f32874524a12101a
  $s$fShowFreeT2 ::
    GHC.Show.Show
      (Control.Monad.Trans.Free.FreeF
         Adder.AdderF
         GHC.Types.Int
         (Control.Monad.Trans.Free.FreeT
            Adder.AdderF GHC.Base.Maybe GHC.Types.Int))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) FreeAdder.$s$fShowFreeF -}
2f48fe4fd0151a540fcf8a3c6c97a603
  $s$fShowFreeT_$s$fShowFreeT_$cshow ::
    Control.Monad.Trans.Free.FreeT
      Adder.AdderF GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Control.Monad.Trans.Free.FreeT
                          Adder.AdderF GHC.Base.Maybe GHC.Types.Int ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      Control.Monad.Trans.Free.$fShowFreeT1)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ (Control.Monad.Trans.Free.FreeF
                           Adder.AdderF
                           GHC.Types.Int
                           (Control.Monad.Trans.Free.FreeT
                              Adder.AdderF GHC.Base.Maybe GHC.Types.Int))
                      FreeAdder.$s$fShowFreeT2
                      Control.Monad.Trans.Free.$fReadFreeF5
                      x `cast`
                      (Control.Monad.Trans.Free.NTCo:FreeT[0]
                           <Adder.AdderF>_N <GHC.Base.Maybe>_N <GHC.Types.Int>_N)
                      (GHC.Types.[] @ GHC.Types.Char))) -}
7fbb7a66fb374209fdb53b83dbff9227
  $s$fShowFreeT_$s$fShowFreeT_$cshowList ::
    [Control.Monad.Trans.Free.FreeT
       Adder.AdderF GHC.Base.Maybe GHC.Types.Int]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ ls :: [Control.Monad.Trans.Free.FreeT
                            Adder.AdderF GHC.Base.Maybe GHC.Types.Int]
                   s :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Control.Monad.Trans.Free.FreeT
                        Adder.AdderF GHC.Base.Maybe GHC.Types.Int)
                   (Control.Monad.Trans.Free.$fShowFreeT_$cshowsPrec
                      @ Adder.AdderF
                      @ GHC.Base.Maybe
                      @ GHC.Types.Int
                      FreeAdder.$s$fShowFreeT1
                      GHC.Show.shows18)
                   ls
                   s) -}
2b2b71badc5929cdc6a3e8895c8aeb64
  $s$fShowFreeT_$s$fShowMaybe ::
    GHC.Show.Show
      (GHC.Base.Maybe
         (Control.Monad.Trans.Free.FreeF
            Adder.AdderF
            GHC.Types.Int
            (Control.Monad.Trans.Free.FreeT
               Adder.AdderF GHC.Base.Maybe GHC.Types.Int)))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe
                       (Control.Monad.Trans.Free.FreeF
                          Adder.AdderF
                          GHC.Types.Int
                          (Control.Monad.Trans.Free.FreeT
                             Adder.AdderF GHC.Base.Maybe GHC.Types.Int)))
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ (Control.Monad.Trans.Free.FreeF
                          Adder.AdderF
                          GHC.Types.Int
                          (Control.Monad.Trans.Free.FreeT
                             Adder.AdderF GHC.Base.Maybe GHC.Types.Int))
                     FreeAdder.$s$fShowFreeT2)
                  (GHC.Show.$fShowMaybe_$cshow
                     @ (Control.Monad.Trans.Free.FreeF
                          Adder.AdderF
                          GHC.Types.Int
                          (Control.Monad.Trans.Free.FreeT
                             Adder.AdderF GHC.Base.Maybe GHC.Types.Int))
                     FreeAdder.$s$fShowFreeT2)
                  FreeAdder.$s$fShowFreeT_$s$fShowMaybe_$cshowList -}
ff92de1c6dd88c840748c437d42b9d26
  $s$fShowFreeT_$s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe
       (Control.Monad.Trans.Free.FreeF
          Adder.AdderF
          GHC.Types.Int
          (Control.Monad.Trans.Free.FreeT
             Adder.AdderF GHC.Base.Maybe GHC.Types.Int))]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [GHC.Base.Maybe
                             (Control.Monad.Trans.Free.FreeF
                                Adder.AdderF
                                GHC.Types.Int
                                (Control.Monad.Trans.Free.FreeT
                                   Adder.AdderF GHC.Base.Maybe GHC.Types.Int))]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe
                        (Control.Monad.Trans.Free.FreeF
                           Adder.AdderF
                           GHC.Types.Int
                           (Control.Monad.Trans.Free.FreeT
                              Adder.AdderF GHC.Base.Maybe GHC.Types.Int)))
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ (Control.Monad.Trans.Free.FreeF
                           Adder.AdderF
                           GHC.Types.Int
                           (Control.Monad.Trans.Free.FreeT
                              Adder.AdderF GHC.Base.Maybe GHC.Types.Int))
                      FreeAdder.$s$fShowFreeT2
                      GHC.Show.shows18)
                   eta
                   eta1) -}
5b0e2a45ccb38152fff6c3ae73e66d41
  add1 ::
    GHC.Integer.Type.Integer
    -> GHC.Base.Maybe
         (Control.Monad.Trans.Free.FreeF
            Adder.AdderF
            GHC.Types.Int
            (Control.Monad.Trans.Free.FreeT
               Adder.AdderF GHC.Base.Maybe GHC.Types.Int))
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ ds :: GHC.Integer.Type.Integer -> FreeAdder.add2) -}
f8188df9f1cf5a540462ee2d773f3448
  add2 ::
    GHC.Base.Maybe
      (Control.Monad.Trans.Free.FreeF
         Adder.AdderF
         GHC.Types.Int
         (Control.Monad.Trans.Free.FreeT
            Adder.AdderF GHC.Base.Maybe GHC.Types.Int))
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (Control.Monad.Trans.Free.FreeF
                        Adder.AdderF
                        GHC.Types.Int
                        (Control.Monad.Trans.Free.FreeT
                           Adder.AdderF GHC.Base.Maybe GHC.Types.Int))
                   FreeAdder.add4) -}
e185036ce3799c19e6cef50292d6b38f
  add3 ::
    Control.Monad.Trans.Free.FreeT
      Adder.AdderF GHC.Base.Maybe GHC.Types.Int
  {- Unfolding: (Control.Monad.Trans.Free.$w$c>>=
                   @ Adder.AdderF
                   @ GHC.Base.Maybe
                   Adder.$fFunctorAdderF
                   GHC.Base.$fMonadMaybe
                   @ GHC.Integer.Type.Integer
                   @ GHC.Types.Int
                   FreeAdder.add6
                     `cast`
                   (Sym (Control.Monad.Trans.Free.NTCo:FreeT[0]
                             <Adder.AdderF>_N <GHC.Base.Maybe>_N <GHC.Integer.Type.Integer>_N))
                   FreeAdder.add1
                     `cast`
                   (<GHC.Integer.Type.Integer>_R
                    ->_R Sym (Control.Monad.Trans.Free.NTCo:FreeT[0]
                                  <Adder.AdderF>_N <GHC.Base.Maybe>_N <GHC.Types.Int>_N))) -}
9f5616fa6ea2895b9b76031c1515c91e
  add4 ::
    Control.Monad.Trans.Free.FreeF
      Adder.AdderF
      GHC.Types.Int
      (Control.Monad.Trans.Free.FreeT
         Adder.AdderF GHC.Base.Maybe GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Control.Monad.Trans.Free.Pure
                   @ Adder.AdderF
                   @ GHC.Types.Int
                   @ (Control.Monad.Trans.Free.FreeT
                        Adder.AdderF GHC.Base.Maybe GHC.Types.Int)
                   FreeAdder.add5) -}
bdd474908e1563ab660e1f347bb6c9df
  add5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4) -}
b9c7da685136238263827ab711b6e0a4
  add6 ::
    GHC.Base.Maybe
      (Control.Monad.Trans.Free.FreeF
         Adder.AdderF
         GHC.Integer.Type.Integer
         (Control.Monad.Trans.Free.FreeT
            Adder.AdderF GHC.Base.Maybe GHC.Integer.Type.Integer))
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ (Control.Monad.Trans.Free.FreeF
                        Adder.AdderF
                        GHC.Integer.Type.Integer
                        (Control.Monad.Trans.Free.FreeT
                           Adder.AdderF GHC.Base.Maybe GHC.Integer.Type.Integer))
                   FreeAdder.add7) -}
32bb75701960c19037639eb57ced405d
  add7 ::
    Control.Monad.Trans.Free.FreeF
      Adder.AdderF
      GHC.Integer.Type.Integer
      (Control.Monad.Trans.Free.FreeT
         Adder.AdderF GHC.Base.Maybe GHC.Integer.Type.Integer)
  {- HasNoCafRefs,
     Unfolding: (Control.Monad.Trans.Free.Pure
                   @ Adder.AdderF
                   @ GHC.Integer.Type.Integer
                   @ (Control.Monad.Trans.Free.FreeT
                        Adder.AdderF GHC.Base.Maybe GHC.Integer.Type.Integer)
                   FreeAdder.add8) -}
1f62543cc0bd90faee2678624bc510f3
  add8 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 2) -}
06d3dca7b10445066e2cc18c94800e71
  mainfreeadder :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                FreeAdder.mainfreeadder1
                  `cast`
                (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
315f004ff007724093cdef7133dcafd6
  mainfreeadder1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        FreeAdder.mainfreeadder2
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 System.IO.print1
                   @ (Control.Monad.Trans.Free.FreeT
                        Adder.AdderF GHC.Base.Maybe GHC.Types.Int)
                   FreeAdder.$s$fShowFreeF2
                   FreeAdder.add3
                   ipv }) -}
dbe1ec84eb6ef13da683923d74d886ea
  mainfreeadder2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows6
                   FreeAdder.mainfreeadder3) -}
652235280898d023c751e8dc61a20299
  mainfreeadder3 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   FreeAdder.mainfreeadder5
                   FreeAdder.mainfreeadder4) -}
4dbef6b828e725c00fafcd10339069a7
  mainfreeadder4 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
258a1ad94a11009c7356c80b75b4b4c1
  mainfreeadder5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "hello freeadder"#) -}
"SPEC/FreeAdder $fShowFreeF @ AdderF @ Int @ (FreeT
                                               AdderF Maybe Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                                                                                  GHC.Types.Int
                                                                                                                                      $dShow1 :: GHC.Show.Show
                                                                                                                                                   (Adder.AdderF
                                                                                                                                                      (Control.Monad.Trans.Free.FreeT
                                                                                                                                                         Adder.AdderF
                                                                                                                                                         GHC.Base.Maybe
                                                                                                                                                         GHC.Types.Int))
  Control.Monad.Trans.Free.$fShowFreeF @ Adder.AdderF
                                       @ GHC.Types.Int
                                       @ (Control.Monad.Trans.Free.FreeT
                                            Adder.AdderF GHC.Base.Maybe GHC.Types.Int)
                                       $dShow
                                       $dShow1
  = FreeAdder.$s$fShowFreeF
"SPEC/FreeAdder $fShowFreeF_$cshowList @ AdderF @ Int @ (FreeT
                                                          AdderF Maybe Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                                                                                                        GHC.Types.Int
                                                                                                                                                            $dShow1 :: GHC.Show.Show
                                                                                                                                                                         (Adder.AdderF
                                                                                                                                                                            (Control.Monad.Trans.Free.FreeT
                                                                                                                                                                               Adder.AdderF
                                                                                                                                                                               GHC.Base.Maybe
                                                                                                                                                                               GHC.Types.Int))
  Control.Monad.Trans.Free.$fShowFreeF_$cshowList @ Adder.AdderF
                                                  @ GHC.Types.Int
                                                  @ (Control.Monad.Trans.Free.FreeT
                                                       Adder.AdderF GHC.Base.Maybe GHC.Types.Int)
                                                  $dShow
                                                  $dShow1
  = FreeAdder.$s$fShowFreeF_$s$fShowFreeF_$cshowList
"SPEC/FreeAdder $fShowFreeT @ AdderF @ Maybe @ Int" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                (GHC.Base.Maybe
                                                                                   (Control.Monad.Trans.Free.FreeF
                                                                                      Adder.AdderF
                                                                                      GHC.Types.Int
                                                                                      (Control.Monad.Trans.Free.FreeT
                                                                                         Adder.AdderF
                                                                                         GHC.Base.Maybe
                                                                                         GHC.Types.Int)))
  Control.Monad.Trans.Free.$fShowFreeT @ Adder.AdderF
                                       @ GHC.Base.Maybe
                                       @ GHC.Types.Int
                                       $dShow
  = FreeAdder.$s$fShowFreeT
"SPEC/FreeAdder $fShowFreeT_$cshow @ AdderF @ Maybe @ Int" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                       (GHC.Base.Maybe
                                                                                          (Control.Monad.Trans.Free.FreeF
                                                                                             Adder.AdderF
                                                                                             GHC.Types.Int
                                                                                             (Control.Monad.Trans.Free.FreeT
                                                                                                Adder.AdderF
                                                                                                GHC.Base.Maybe
                                                                                                GHC.Types.Int)))
  Control.Monad.Trans.Free.$fShowFreeT_$cshow @ Adder.AdderF
                                              @ GHC.Base.Maybe
                                              @ GHC.Types.Int
                                              $dShow
  = FreeAdder.$s$fShowFreeT_$s$fShowFreeT_$cshow
"SPEC/FreeAdder $fShowFreeT_$cshowList @ AdderF @ Maybe @ Int" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                           (GHC.Base.Maybe
                                                                                              (Control.Monad.Trans.Free.FreeF
                                                                                                 Adder.AdderF
                                                                                                 GHC.Types.Int
                                                                                                 (Control.Monad.Trans.Free.FreeT
                                                                                                    Adder.AdderF
                                                                                                    GHC.Base.Maybe
                                                                                                    GHC.Types.Int)))
  Control.Monad.Trans.Free.$fShowFreeT_$cshowList @ Adder.AdderF
                                                  @ GHC.Base.Maybe
                                                  @ GHC.Types.Int
                                                  $dShow
  = FreeAdder.$s$fShowFreeT_$s$fShowFreeT_$cshowList
"SPEC/FreeAdder $fShowMaybe @ (FreeF
                                AdderF Int (FreeT AdderF Maybe Int))" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                                                                       (Control.Monad.Trans.Free.FreeF
                                                                                                                                          Adder.AdderF
                                                                                                                                          GHC.Types.Int
                                                                                                                                          (Control.Monad.Trans.Free.FreeT
                                                                                                                                             Adder.AdderF
                                                                                                                                             GHC.Base.Maybe
                                                                                                                                             GHC.Types.Int))
  GHC.Show.$fShowMaybe @ (Control.Monad.Trans.Free.FreeF
                            Adder.AdderF
                            GHC.Types.Int
                            (Control.Monad.Trans.Free.FreeT
                               Adder.AdderF GHC.Base.Maybe GHC.Types.Int))
                       $dShow
  = FreeAdder.$s$fShowFreeT_$s$fShowMaybe
"SPEC/FreeAdder $fShowMaybe_$cshowList @ (FreeF
                                           AdderF Int (FreeT AdderF Maybe Int))" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                                                                                             (Control.Monad.Trans.Free.FreeF
                                                                                                                                                                Adder.AdderF
                                                                                                                                                                GHC.Types.Int
                                                                                                                                                                (Control.Monad.Trans.Free.FreeT
                                                                                                                                                                   Adder.AdderF
                                                                                                                                                                   GHC.Base.Maybe
                                                                                                                                                                   GHC.Types.Int))
  GHC.Show.$fShowMaybe_$cshowList @ (Control.Monad.Trans.Free.FreeF
                                       Adder.AdderF
                                       GHC.Types.Int
                                       (Control.Monad.Trans.Free.FreeT
                                          Adder.AdderF GHC.Base.Maybe GHC.Types.Int))
                                  $dShow
  = FreeAdder.$s$fShowFreeT_$s$fShowMaybe_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

